/* tslint:disable */
/* eslint-disable */
/**
 * Token Validation API
 * API per testare la validazione dei token JWT da Keycloak
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccommodationRequestDto } from '../models';
// @ts-ignore
import type { AccomodationDto } from '../models';
/**
 * AccommodationApi - axios parameter creator
 * @export
 */
export const AccommodationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationGet: async (page?: number, size?: number, sortBy?: string, isDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accommodation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['isDescending'] = isDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdDelete', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdGet', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AccomodationDto} [accomodationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdPut: async (id: number, accomodationDto?: AccomodationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdPut', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accomodationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccommodationRequestDto} [accommodationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationPost: async (accommodationRequestDto?: AccommodationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accommodation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accommodationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccommodationApi - functional programming interface
 * @export
 */
export const AccommodationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccommodationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationGet(page?: number, size?: number, sortBy?: string, isDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationGet(page, size, sortBy, isDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AccomodationDto} [accomodationDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdPut(id: number, accomodationDto?: AccomodationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdPut(id, accomodationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AccommodationRequestDto} [accommodationRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationPost(accommodationRequestDto?: AccommodationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationPost(accommodationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccommodationApi - factory interface
 * @export
 */
export const AccommodationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccommodationApiFp(configuration)
    return {
        /**
         * 
         * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationGet(requestParameters: AccommodationApiApiAccommodationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationGet(requestParameters.page, requestParameters.size, requestParameters.sortBy, requestParameters.isDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationIdPut(requestParameters.id, requestParameters.accomodationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationPost(requestParameters: AccommodationApiApiAccommodationPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationPost(requestParameters.accommodationRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccommodationApi - interface
 * @export
 * @interface AccommodationApi
 */
export interface AccommodationApiInterface {
    /**
     * 
     * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationGet(requestParameters?: AccommodationApiApiAccommodationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationPost(requestParameters?: AccommodationApiApiAccommodationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for apiAccommodationGet operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationGetRequest
 */
export interface AccommodationApiApiAccommodationGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {boolean}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly isDescending?: boolean
}

/**
 * Request parameters for apiAccommodationIdDelete operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdDeleteRequest
 */
export interface AccommodationApiApiAccommodationIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiAccommodationIdGet operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdGetRequest
 */
export interface AccommodationApiApiAccommodationIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiAccommodationIdPut operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdPutRequest
 */
export interface AccommodationApiApiAccommodationIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdPut
     */
    readonly id: number

    /**
     * 
     * @type {AccomodationDto}
     * @memberof AccommodationApiApiAccommodationIdPut
     */
    readonly accomodationDto?: AccomodationDto
}

/**
 * Request parameters for apiAccommodationPost operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationPostRequest
 */
export interface AccommodationApiApiAccommodationPostRequest {
    /**
     * 
     * @type {AccommodationRequestDto}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly accommodationRequestDto?: AccommodationRequestDto
}

/**
 * AccommodationApi - object-oriented interface
 * @export
 * @class AccommodationApi
 * @extends {BaseAPI}
 */
export class AccommodationApi extends BaseAPI implements AccommodationApiInterface {
    /**
     * 
     * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationGet(requestParameters: AccommodationApiApiAccommodationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationGet(requestParameters.page, requestParameters.size, requestParameters.sortBy, requestParameters.isDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdPut(requestParameters.id, requestParameters.accomodationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationPost(requestParameters: AccommodationApiApiAccommodationPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationPost(requestParameters.accommodationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

