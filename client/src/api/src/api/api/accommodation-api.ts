/* tslint:disable */
/* eslint-disable */
/**
 * Bookify API
 * API del back-end di Bookify
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccommodationDto } from '../models';
// @ts-ignore
import type { AccommodationDtoPagedResult } from '../models';
// @ts-ignore
import type { AccommodationType } from '../models';
// @ts-ignore
import type { AccommodationUpdate } from '../models';
/**
 * AccommodationApi - axios parameter creator
 * @export
 */
export const AccommodationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDescending] 
         * @param {string} [includes] 
         * @param {string} [filters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationGet: async (page?: number, size?: number, sortBy?: string, isDescending?: boolean, includes?: string, filters?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accommodation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (isDescending !== undefined) {
                localVarQueryParameter['isDescending'] = isDescending;
            }

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdDelete', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdGet: async (id: number, includes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdGet', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AccommodationUpdate} [accommodationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdPut: async (id: number, accommodationUpdate?: AccommodationUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationIdPut', 'id', id)
            const localVarPath = `/api/Accommodation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accommodationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {AccommodationType} type 
         * @param {File} imgFile 
         * @param {string} addressStreet 
         * @param {string} addressNumber 
         * @param {string} addressCity 
         * @param {string} addressProvince 
         * @param {string} addressPostalCode 
         * @param {string} addressCountry 
         * @param {string} [addressAdditionalInfo] 
         * @param {number} [addressLatitude] 
         * @param {number} [addressLongitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationPost: async (name: string, type: AccommodationType, imgFile: File, addressStreet: string, addressNumber: string, addressCity: string, addressProvince: string, addressPostalCode: string, addressCountry: string, addressAdditionalInfo?: string, addressLatitude?: number, addressLongitude?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiAccommodationPost', 'name', name)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('apiAccommodationPost', 'type', type)
            // verify required parameter 'imgFile' is not null or undefined
            assertParamExists('apiAccommodationPost', 'imgFile', imgFile)
            // verify required parameter 'addressStreet' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressStreet', addressStreet)
            // verify required parameter 'addressNumber' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressNumber', addressNumber)
            // verify required parameter 'addressCity' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressCity', addressCity)
            // verify required parameter 'addressProvince' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressProvince', addressProvince)
            // verify required parameter 'addressPostalCode' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressPostalCode', addressPostalCode)
            // verify required parameter 'addressCountry' is not null or undefined
            assertParamExists('apiAccommodationPost', 'addressCountry', addressCountry)
            const localVarPath = `/api/Accommodation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["openid", "profile", "email"], configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('Type', type as any);
            }
    
            if (imgFile !== undefined) { 
                localVarFormParams.append('ImgFile', imgFile as any);
            }
    
            if (addressStreet !== undefined) { 
                localVarFormParams.append('Address.Street', addressStreet as any);
            }
    
            if (addressNumber !== undefined) { 
                localVarFormParams.append('Address.Number', addressNumber as any);
            }
    
            if (addressCity !== undefined) { 
                localVarFormParams.append('Address.City', addressCity as any);
            }
    
            if (addressProvince !== undefined) { 
                localVarFormParams.append('Address.Province', addressProvince as any);
            }
    
            if (addressPostalCode !== undefined) { 
                localVarFormParams.append('Address.PostalCode', addressPostalCode as any);
            }
    
            if (addressCountry !== undefined) { 
                localVarFormParams.append('Address.Country', addressCountry as any);
            }
    
            if (addressAdditionalInfo !== undefined) { 
                localVarFormParams.append('Address.AdditionalInfo', addressAdditionalInfo as any);
            }
    
            if (addressLatitude !== undefined) { 
                localVarFormParams.append('Address.Latitude', addressLatitude as any);
            }
    
            if (addressLongitude !== undefined) { 
                localVarFormParams.append('Address.Longitude', addressLongitude as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccommodationApi - functional programming interface
 * @export
 */
export const AccommodationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccommodationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sortBy] 
         * @param {boolean} [isDescending] 
         * @param {string} [includes] 
         * @param {string} [filters] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationGet(page?: number, size?: number, sortBy?: string, isDescending?: boolean, includes?: string, filters?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationDtoPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationGet(page, size, sortBy, isDescending, includes, filters, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [includes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdGet(id: number, includes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdGet(id, includes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AccommodationUpdate} [accommodationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationIdPut(id: number, accommodationUpdate?: AccommodationUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationIdPut(id, accommodationUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {AccommodationType} type 
         * @param {File} imgFile 
         * @param {string} addressStreet 
         * @param {string} addressNumber 
         * @param {string} addressCity 
         * @param {string} addressProvince 
         * @param {string} addressPostalCode 
         * @param {string} addressCountry 
         * @param {string} [addressAdditionalInfo] 
         * @param {number} [addressLatitude] 
         * @param {number} [addressLongitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationPost(name: string, type: AccommodationType, imgFile: File, addressStreet: string, addressNumber: string, addressCity: string, addressProvince: string, addressPostalCode: string, addressCountry: string, addressAdditionalInfo?: string, addressLatitude?: number, addressLongitude?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationPost(name, type, imgFile, addressStreet, addressNumber, addressCity, addressProvince, addressPostalCode, addressCountry, addressAdditionalInfo, addressLatitude, addressLongitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccommodationApi.apiAccommodationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccommodationApi - factory interface
 * @export
 */
export const AccommodationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccommodationApiFp(configuration)
    return {
        /**
         * 
         * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationGet(requestParameters: AccommodationApiApiAccommodationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDtoPagedResult> {
            return localVarFp.apiAccommodationGet(requestParameters.page, requestParameters.size, requestParameters.sortBy, requestParameters.isDescending, requestParameters.includes, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccommodationIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto> {
            return localVarFp.apiAccommodationIdGet(requestParameters.id, requestParameters.includes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto> {
            return localVarFp.apiAccommodationIdPut(requestParameters.id, requestParameters.accommodationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationPost(requestParameters: AccommodationApiApiAccommodationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto> {
            return localVarFp.apiAccommodationPost(requestParameters.name, requestParameters.type, requestParameters.imgFile, requestParameters.addressStreet, requestParameters.addressNumber, requestParameters.addressCity, requestParameters.addressProvince, requestParameters.addressPostalCode, requestParameters.addressCountry, requestParameters.addressAdditionalInfo, requestParameters.addressLatitude, requestParameters.addressLongitude, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccommodationApi - interface
 * @export
 * @interface AccommodationApi
 */
export interface AccommodationApiInterface {
    /**
     * 
     * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationGet(requestParameters?: AccommodationApiApiAccommodationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDtoPagedResult>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto>;

    /**
     * 
     * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApiInterface
     */
    apiAccommodationPost(requestParameters: AccommodationApiApiAccommodationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccommodationDto>;

}

/**
 * Request parameters for apiAccommodationGet operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationGetRequest
 */
export interface AccommodationApiApiAccommodationGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {boolean}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly isDescending?: boolean

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly includes?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationGet
     */
    readonly filters?: string
}

/**
 * Request parameters for apiAccommodationIdDelete operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdDeleteRequest
 */
export interface AccommodationApiApiAccommodationIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiAccommodationIdGet operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdGetRequest
 */
export interface AccommodationApiApiAccommodationIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationIdGet
     */
    readonly includes?: string
}

/**
 * Request parameters for apiAccommodationIdPut operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationIdPutRequest
 */
export interface AccommodationApiApiAccommodationIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationIdPut
     */
    readonly id: number

    /**
     * 
     * @type {AccommodationUpdate}
     * @memberof AccommodationApiApiAccommodationIdPut
     */
    readonly accommodationUpdate?: AccommodationUpdate
}

/**
 * Request parameters for apiAccommodationPost operation in AccommodationApi.
 * @export
 * @interface AccommodationApiApiAccommodationPostRequest
 */
export interface AccommodationApiApiAccommodationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly name: string

    /**
     * 
     * @type {AccommodationType}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly type: AccommodationType

    /**
     * 
     * @type {File}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly imgFile: File

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressStreet: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressNumber: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressCity: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressProvince: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressPostalCode: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressCountry: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressAdditionalInfo?: string

    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressLatitude?: number

    /**
     * 
     * @type {number}
     * @memberof AccommodationApiApiAccommodationPost
     */
    readonly addressLongitude?: number
}

/**
 * AccommodationApi - object-oriented interface
 * @export
 * @class AccommodationApi
 * @extends {BaseAPI}
 */
export class AccommodationApi extends BaseAPI implements AccommodationApiInterface {
    /**
     * 
     * @param {AccommodationApiApiAccommodationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationGet(requestParameters: AccommodationApiApiAccommodationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationGet(requestParameters.page, requestParameters.size, requestParameters.sortBy, requestParameters.isDescending, requestParameters.includes, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdDelete(requestParameters: AccommodationApiApiAccommodationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdGet(requestParameters: AccommodationApiApiAccommodationIdGetRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdGet(requestParameters.id, requestParameters.includes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationIdPut(requestParameters: AccommodationApiApiAccommodationIdPutRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationIdPut(requestParameters.id, requestParameters.accommodationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationApiApiAccommodationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationApi
     */
    public apiAccommodationPost(requestParameters: AccommodationApiApiAccommodationPostRequest, options?: RawAxiosRequestConfig) {
        return AccommodationApiFp(this.configuration).apiAccommodationPost(requestParameters.name, requestParameters.type, requestParameters.imgFile, requestParameters.addressStreet, requestParameters.addressNumber, requestParameters.addressCity, requestParameters.addressProvince, requestParameters.addressPostalCode, requestParameters.addressCountry, requestParameters.addressAdditionalInfo, requestParameters.addressLatitude, requestParameters.addressLongitude, options).then((request) => request(this.axios, this.basePath));
    }
}

